"use strict";(self.webpackChunk_inversifyjs_inversify_logger_docs_site=self.webpackChunk_inversifyjs_inversify_logger_docs_site||[]).push([["148"],{4869:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>c,toc:()=>u,default:()=>m,metadata:()=>r,assets:()=>h,contentTitle:()=>d});var r=JSON.parse('{"id":"api","title":"API","description":"This section covers the complete API surface of the InversifyJS Logger package, including interfaces, enums, and concrete logger implementations.","source":"@site/docs/api.mdx","sourceDirName":".","slug":"/api","permalink":"/logger/docs/api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"API"},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/logger/docs/introduction/getting-started"}}'),t=o(9970),s=o(7245),i=o(7152),l=o(6223),a=o(4929),g=o(445);o(3160),o(9218);let c={sidebar_position:2,title:"API"},d="API Reference",h={},u=[{value:"Core Interfaces and Types",id:"core-interfaces-and-types",level:2},{value:"Logger",id:"logger",level:3},{value:"Example: Using the Logger interface",id:"example-using-the-logger-interface",level:4},{value:"LogLevel",id:"loglevel",level:3},{value:"LoggerOptions",id:"loggeroptions",level:3},{value:"Example: Configuring logger options",id:"example-configuring-logger-options",level:4},{value:"ContextMetadata",id:"contextmetadata",level:3},{value:"Example: Using context metadata",id:"example-using-context-metadata",level:4},{value:"Logger Implementations",id:"logger-implementations",level:2},{value:"ConsoleLogger",id:"consolelogger",level:3},{value:"Example: Console logging",id:"example-console-logging",level:4},{value:"FileLogger",id:"filelogger",level:3},{value:"Example: File logging",id:"example-file-logging",level:4},{value:"HttpLogger",id:"httplogger",level:3},{value:"Example: HTTP logging",id:"example-http-logging",level:4},{value:"StreamLogger",id:"streamlogger",level:3},{value:"Example: Stream logging",id:"example-stream-logging",level:4},{value:"Log Message Formatting",id:"log-message-formatting",level:2},{value:"Human-readable Format (default)",id:"human-readable-format-default",level:3},{value:"JSON Format",id:"json-format",level:3}];function p(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,t.jsx)(n.p,{children:"This section covers the complete API surface of the InversifyJS Logger package, including interfaces, enums, and concrete logger implementations."}),"\n",(0,t.jsx)(n.h2,{id:"core-interfaces-and-types",children:"Core Interfaces and Types"}),"\n",(0,t.jsx)(n.p,{children:"The InversifyJS Logger package provides a clean abstraction for logging functionality, allowing you to inject different logger implementations while maintaining a consistent interface."}),"\n",(0,t.jsx)(n.h3,{id:"logger",children:"Logger"}),"\n",(0,t.jsx)(n.p,{children:"The main logger interface that defines the contract for all logger implementations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Logger {\n  log(logType: LogLevel, message: string, context?: ContextMetadata): void;\n  error(message: string, context?: ContextMetadata): void;\n  warn(message: string, context?: ContextMetadata): void;\n  info(message: string, context?: ContextMetadata): void;\n  http(message: string, context?: ContextMetadata): void;\n  verbose(message: string, context?: ContextMetadata): void;\n  debug(message: string, context?: ContextMetadata): void;\n  silly(message: string, context?: ContextMetadata): void;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Logger"})," interface provides methods for all standard log levels, plus a generic ",(0,t.jsx)(n.code,{children:"log"})," method that accepts a ",(0,t.jsx)(n.code,{children:"LogLevel"})," parameter. All methods accept an optional ",(0,t.jsx)(n.code,{children:"context"})," parameter for providing additional metadata."]}),"\n",(0,t.jsx)(n.h4,{id:"example-using-the-logger-interface",children:"Example: Using the Logger interface"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:"import type { Logger } from '@inversifyjs/logger';\nimport { ConsoleLogger, LogLevel } from '@inversifyjs/logger';\n\n// Using the Logger interface for dependency injection\nclass UserService {\n  constructor(private readonly logger: Logger) {}\n\n  public createUser(userData: { email: string; name: string }): void {\n    this.logger.info('Creating new user', { email: userData.email });\n\n    try {\n      // Simulate user creation logic\n      this.logger.debug('Validating user data', userData);\n\n      // Using the generic log method with LogLevel enum\n      this.logger.log(LogLevel.INFO, 'User created successfully', {\n        context: 'UserService',\n        email: userData.email,\n        userId: 'generated-id',\n      });\n    } catch (error) {\n      this.logger.error('Failed to create user', {\n        email: userData.email,\n        error: String(error),\n      });\n\n      throw error;\n    }\n  }\n}\n\n// Inject a concrete logger implementation\nconst logger: Logger = new ConsoleLogger('UserService');\nconst userService: UserService = new UserService(logger);\n\nuserService.createUser({ email: 'user@example.com', name: 'John Doe' });\n"}),"\n",(0,t.jsx)(n.h3,{id:"loglevel",children:"LogLevel"}),"\n",(0,t.jsx)(n.p,{children:"An enumeration defining the available log levels in order of severity."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  HTTP = 'http',\n  VERBOSE = 'verbose',\n  DEBUG = 'debug',\n  SILLY = 'silly',\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Log levels are ordered by severity, with ",(0,t.jsx)(n.code,{children:"ERROR"})," being the highest severity and ",(0,t.jsx)(n.code,{children:"SILLY"})," being the lowest. When configuring logger options, you can specify which log levels should be processed."]}),"\n",(0,t.jsx)(n.h3,{id:"loggeroptions",children:"LoggerOptions"}),"\n",(0,t.jsx)(n.p,{children:"Configuration interface for customizing logger behavior."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface LoggerOptions {\n  json?: boolean;\n  logTypes?: LogLevel[];\n  timestamp?: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"json"})," (optional boolean): When ",(0,t.jsx)(n.code,{children:"true"}),", formats logs as JSON."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"logTypes"})," (optional LogLevel[]): Array of log levels to process. Messages with log levels not in this array will be ignored."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timestamp"})," (optional boolean): When ",(0,t.jsx)(n.code,{children:"true"}),", includes timestamps in log messages."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-configuring-logger-options",children:"Example: Configuring logger options"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:"import { ConsoleLogger, LoggerOptions, LogLevel } from '@inversifyjs/logger';\n\n// Logger with custom options\nconst options: LoggerOptions = {\n  json: true,\n  logTypes: [LogLevel.ERROR, LogLevel.WARN, LogLevel.INFO],\n  timestamp: true,\n};\n\nconst logger: ConsoleLogger = new ConsoleLogger('ConfiguredLogger', options);\n\n// These will be logged (included in logTypes)\nlogger.error('This error will be logged');\nlogger.warn('This warning will be logged');\nlogger.info('This info will be logged');\n\n// These will be ignored (not included in logTypes)\nlogger.debug('This debug message will be ignored');\nlogger.verbose('This verbose message will be ignored');\n\n// Logger with different configuration\nconst timestampLogger: ConsoleLogger = new ConsoleLogger('TimestampLogger', {\n  json: false,\n  timestamp: true,\n});\n\ntimestampLogger.info('This message includes a timestamp');\n"}),"\n",(0,t.jsx)(n.h3,{id:"contextmetadata",children:"ContextMetadata"}),"\n",(0,t.jsx)(n.p,{children:"Interface for providing additional context data with log messages."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface ContextMetadata {\n  [key: string]: unknown;\n  context?: string | undefined;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ContextMetadata"})," interface allows you to attach arbitrary key-value pairs to log messages. The special ",(0,t.jsx)(n.code,{children:"context"})," property can be used to override the logger's default context name for specific log messages."]}),"\n",(0,t.jsx)(n.h4,{id:"example-using-context-metadata",children:"Example: Using context metadata"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:"import { ConsoleLogger } from '@inversifyjs/logger';\n\nconst logger: ConsoleLogger = new ConsoleLogger('UserService');\n\n// Basic logging with context\nconst userContext: Record<string, unknown> = {\n  action: 'login',\n  context: 'Authentication',\n  userId: '12345',\n};\n\nlogger.info('User login attempt', userContext);\nlogger.error('Login failed', { ...userContext, reason: 'Invalid password' });\n\n// Using different log levels\nlogger.debug('Debug information', { requestId: 'req-001' });\nlogger.verbose('Verbose information', { module: 'UserService' });\nlogger.silly('Silly level logging', { details: 'Very detailed info' });\n"}),"\n",(0,t.jsx)(n.h2,{id:"logger-implementations",children:"Logger Implementations"}),"\n",(0,t.jsxs)(n.p,{children:["The InversifyJS Logger package provides several concrete logger implementations based on the Winston logging library. All implementations extend the base ",(0,t.jsx)(n.code,{children:"WinstonLoggerAdapter"})," class and implement the ",(0,t.jsx)(n.code,{children:"Logger"})," interface."]}),"\n",(0,t.jsx)(n.h3,{id:"consolelogger",children:"ConsoleLogger"}),"\n",(0,t.jsx)(n.p,{children:"A logger implementation that outputs to the console/terminal."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class ConsoleLogger extends WinstonLoggerAdapter {\n  constructor(context?: string, loggerOptions?: LoggerOptions)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context"})," (optional string): A context name that will be included in log messages to identify the source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"loggerOptions"})," (optional LoggerOptions): Configuration options for customizing logger behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-console-logging",children:"Example: Console logging"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:i}),"\n",(0,t.jsx)(n.h3,{id:"filelogger",children:"FileLogger"}),"\n",(0,t.jsx)(n.p,{children:"A logger implementation that writes logs to a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class FileLogger extends WinstonLoggerAdapter {\n  constructor(fileName: string, context?: string, loggerOptions?: LoggerOptions)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fileName"})," (string): Path to the log file. The file will be created if it doesn't exist."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context"})," (optional string): A context name that will be included in log messages to identify the source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"loggerOptions"})," (optional LoggerOptions): Configuration options for customizing logger behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-file-logging",children:"Example: File logging"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:l}),"\n",(0,t.jsx)(n.h3,{id:"httplogger",children:"HttpLogger"}),"\n",(0,t.jsx)(n.p,{children:"A logger implementation that sends logs to an HTTP endpoint."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class HttpLogger extends WinstonLoggerAdapter {\n  constructor(url: URL | string, context?: string, loggerOptions?: LoggerOptions)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"url"})," (URL | string): The HTTP endpoint where logs should be sent. Can be a string URL or a URL object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context"})," (optional string): A context name that will be included in log messages to identify the source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"loggerOptions"})," (optional LoggerOptions): Configuration options for customizing logger behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Notes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The HTTP logger sends log data via HTTP POST requests to the specified endpoint."}),"\n",(0,t.jsx)(n.li,{children:"The target endpoint should be configured to accept and process log data."}),"\n",(0,t.jsx)(n.li,{children:"Consider using HTTPS endpoints for production environments to ensure log data is transmitted securely."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-http-logging",children:"Example: HTTP logging"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:a}),"\n",(0,t.jsx)(n.h3,{id:"streamlogger",children:"StreamLogger"}),"\n",(0,t.jsx)(n.p,{children:"A logger implementation that writes to a Node.js writable stream."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class StreamLogger extends WinstonLoggerAdapter {\n  constructor(\n    stream: NodeJS.WritableStream,\n    eol?: string | undefined,\n    context?: string,\n    loggerOptions?: LoggerOptions\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stream"})," (NodeJS.WritableStream): The writable stream where logs should be written (e.g., ",(0,t.jsx)(n.code,{children:"process.stdout"}),", ",(0,t.jsx)(n.code,{children:"process.stderr"}),", or a file stream)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eol"})," (optional string): End-of-line character(s) to use. Defaults to the system's default line ending."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context"})," (optional string): A context name that will be included in log messages to identify the source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"loggerOptions"})," (optional LoggerOptions): Configuration options for customizing logger behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-stream-logging",children:"Example: Stream logging"}),"\n",(0,t.jsx)(g.A,{language:"ts",children:"import process from 'node:process';\n\nimport { StreamLogger } from '@inversifyjs/logger';\n\nexport const streamLogger: StreamLogger = new StreamLogger(\n  process.stdout,\n  'MyAwesomeApp',\n);\n\nstreamLogger.debug('This is a debug message');\nstreamLogger.error('This is an error message');\nstreamLogger.info('This is an info message');\nstreamLogger.warn('This is a warning message');\n"}),"\n",(0,t.jsx)(n.h2,{id:"log-message-formatting",children:"Log Message Formatting"}),"\n",(0,t.jsx)(n.p,{children:"All logger implementations support two output formats:"}),"\n",(0,t.jsx)(n.h3,{id:"human-readable-format-default",children:"Human-readable Format (default)"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"json: false"})," or when the ",(0,t.jsx)(n.code,{children:"json"})," option is omitted, logs are formatted as:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[Context] - ProcessID Timestamp LogLevel: Message\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[MyAwesomeApp] - 12345 2023-09-18 02:30:45.123 PM info: User login successful\n"})}),"\n",(0,t.jsx)(n.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"json: true"}),", logs are formatted as structured JSON objects:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "level": "info",\n  "message": "User login successful",\n  "timestamp": "2023-09-18 02:30:45.123 PM",\n  "context": "MyAwesomeApp",\n  "userId": "12345",\n  "action": "login"\n}\n'})})]})}function m(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},7152:function(e){e.exports="import { ConsoleLogger } from '@inversifyjs/logger';\n\nconst consoleLogger: ConsoleLogger = new ConsoleLogger('MyAwesomeApp');\n\nconsoleLogger.debug('This is a debug message');\nconsoleLogger.error('This is an error message');\nconsoleLogger.info('This is an info message');\nconsoleLogger.warn('This is a warning message');\n"},6223:function(e){e.exports="import { FileLogger } from '@inversifyjs/logger';\n\nconst fileLogger: FileLogger = new FileLogger('./temp/app.log', 'MyAwesomeApp');\n\nfileLogger.debug('This is a debug message');\nfileLogger.error('This is an error message');\nfileLogger.info('This is an info message');\nfileLogger.warn('This is a warning message');\n"},4929:function(e){e.exports="import { HttpLogger } from '@inversifyjs/logger';\n\nexport const httpLogger: HttpLogger = new HttpLogger(\n  'http://localhost:5341/api/events/raw',\n  'MyAwesomeApp',\n  {\n    json: true,\n  },\n);\n\nhttpLogger.debug('This is a debug message');\nhttpLogger.error('This is an error message');\nhttpLogger.info('This is an info message');\nhttpLogger.warn('This is a warning message');\n"},9218:function(e,n,o){o.d(n,{A:()=>s});var r=o(9970);o(2714);var t=o(929);function s({children:e,hidden:n,className:o}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)("tabItem_hNGx",o),hidden:n,children:e})}},3160:function(e,n,o){o.d(n,{A:()=>j});var r=o(9970),t=o(2714),s=o(929),i=o(9679),l=o(5455),a=o(2328),g=o(4448),c=o(6961),d=o(6656);function h(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u({value:e,tabValues:n}){return n.some(n=>n.value===e)}var p=o(5636);function m({className:e,block:n,selectedValue:o,selectValue:t,tabValues:l}){let a=[],{blockElementScrollPositionUntilNextRender:g}=(0,i.a_)(),c=e=>{let n=e.currentTarget,r=l[a.indexOf(n)].value;r!==o&&(g(n),t(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{let o=a.indexOf(e.currentTarget)+1;n=a[o]??a[0];break}case"ArrowLeft":{let o=a.indexOf(e.currentTarget)-1;n=a[o]??a[a.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:t})=>(0,r.jsx)("li",{role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...t,className:(0,s.A)("tabs__item","tabItem_FBMP",t?.className,{"tabs__item--active":o===e}),children:n??e},e))})}function x({lazy:e,children:n,selectedValue:o}){let i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=i.find(e=>e.props.value===o);return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o}))})}function f(e){let n=function(e){let n,{defaultValue:o,queryString:r=!1,groupId:s}=e,i=function(e){let{values:n,children:o}=e;return(0,t.useMemo)(()=>{let e=n??h(o).map(({props:{value:e,label:n,attributes:o,default:r}})=>({value:e,label:n,attributes:o,default:r})),r=(0,c.XI)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,o])}(e),[p,m]=(0,t.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let o=n.find(e=>e.default)??n[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:o,tabValues:i})),[x,f]=function({queryString:e=!1,groupId:n}){let o=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,g.aZ)(r),(0,t.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})},[r,o])]}({queryString:r,groupId:s}),[j,v]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[o,r]=(0,d.Dv)(n);return[o,(0,t.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:s}),L=u({value:n=x??j,tabValues:i})?n:null;return(0,a.A)(()=>{L&&m(L)},[L]),{selectedValue:p,selectValue:(0,t.useCallback)(e=>{if(!u({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);m(e),f(e),v(e)},[f,v,i]),tabValues:i}}(e);return(0,r.jsxs)("div",{className:(0,s.A)("tabs-container","tabList_urqy"),children:[(0,r.jsx)(m,{...n,...e}),(0,r.jsx)(x,{...n,...e})]})}function j(e){let n=(0,p.A)();return(0,r.jsx)(f,{...e,children:h(e.children)},String(n))}}}]);